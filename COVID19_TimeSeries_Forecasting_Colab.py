# -*- coding: utf-8 -*-
"""Covid-19_data_analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_e07bDLLi9TH86Vv5QJpib4vfpafC2Mj
"""



# %%
# ---------------------------
# 1) Setup (install + imports)
# ---------------------------
!pip install --quiet prophet pandas matplotlib seaborn statsmodels

import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from prophet import Prophet
from statsmodels.tsa.seasonal import seasonal_decompose
from datetime import timedelta

sns.set(style='whitegrid')
plt.rcParams['figure.figsize'] = (12,5)

# 3) Load data

df = pd.read_csv(r'/content/owid-covid-data.csv')
print('Raw rows:', len(df))

# Filter for the country
country_df = df[df['location'] == COUNTRY].copy()
country_df = country_df.sort_values('date')

# Convert 'date' column to datetime objects
country_df['date'] = pd.to_datetime(country_df['date'])

if START_DATE:
    country_df = country_df[country_df['date'] >= pd.to_datetime(START_DATE)]
if END_DATE:
    country_df = country_df[country_df['date'] <= pd.to_datetime(END_DATE)]

country_df = country_df[['date','new_cases','new_deaths','total_cases','total_deaths','new_tests']]
country_df['new_cases'] = country_df['new_cases'].fillna(0)
country_df = country_df.set_index('date')
print('Rows for', COUNTRY, ':', len(country_df))

# 4) Quick EDA & plots
# ---------------------------
# daily new cases
plt.figure()
plt.plot(country_df.index, country_df['new_cases'])
plt.title(f'{COUNTRY} — Daily new COVID-19 cases')
plt.xlabel('Date')
plt.ylabel('New cases')
plt.tight_layout()
plt.show()

# 7-day rolling
country_df['new_cases_7d'] = country_df['new_cases'].rolling(7, min_periods=1).mean()
plt.figure()
plt.plot(country_df.index, country_df['new_cases_7d'])
plt.title(f'{COUNTRY} — 7-day rolling average of new cases')
plt.xlabel('Date')
plt.ylabel('7-day avg new cases')
plt.tight_layout()
plt.show()

# cumulative
plt.figure()
plt.plot(country_df.index, country_df['total_cases'])
plt.title(f'{COUNTRY} — Cumulative confirmed cases')
plt.xlabel('Date')
plt.ylabel('Total cases')
plt.tight_layout()
plt.show()

# ---------------------------
# 5) Decomposition (trend/seasonal/resid)
# ---------------------------
# Work on a weekly-resampled series to make decomposition stable
series = country_df['new_cases'].asfreq('D').fillna(0)
resampled = series

# Add a tiny constant to avoid all-zero issues
resampled_plus = resampled + 1e-9

try:
    decomposition = seasonal_decompose(resampled_plus, model='additive', period=7, extrapolate_trend='freq')
    plt.figure()
    decomposition.plot()
    plt.suptitle(f'{COUNTRY} — Time Series Decomposition (daily, period=7)')
    plt.tight_layout()
    plt.show()
except Exception as e:
    print('Decomposition failed:', e)

# 6) Forecasting with Prophet (short-term)
# ---------------------------
# Prophet expects a DataFrame with columns ds (date) and y (value). We'll forecast new_cases_7d
fdf = country_df[['new_cases_7d']].reset_index().rename(columns={'date':'ds','new_cases_7d':'y'})
# Prophet requires non-negative values and good numeric stability
fdf['y'] = fdf['y'].fillna(0).astype(float)

m = Prophet(daily_seasonality=False, weekly_seasonality=True, yearly_seasonality=True)
try:
    m.fit(fdf)
except Exception as e:
    print('Prophet fitting error — retrying with simpler settings:', e)
    m = Prophet(daily_seasonality=False, weekly_seasonality=True, yearly_seasonality=False)
    m.fit(fdf)

future = m.make_future_dataframe(periods=28)  # forecast 28 days ahead
forecast = m.predict(future)

# Plot forecast
fig1 = m.plot(forecast)
plt.title(f'{COUNTRY} — Prophet forecast of 7-day avg new cases')
plt.xlabel('Date')
plt.ylabel('7-day avg new cases')
plt.show()

# Plot components
fig2 = m.plot_components(forecast)
plt.show()

#7) Save forecast & sample CSV
# ---------------------------
out_dir = '/content/covid_project_outputs'
os.makedirs(out_dir, exist_ok=True)
country_df.reset_index().to_csv(os.path.join(out_dir, f'{COUNTRY}_daily_covid_timeseries.csv'), index=False)
forecast.to_csv(os.path.join(out_dir, f'{COUNTRY}_prophet_forecast.csv'), index=False)
print('Saved outputs to', out_dir)

# %% [markdown]
# ## Next steps / ideas to extend
# - Add hospitalization or vaccination data (if available) and model multivariate forecasts
# - Use SARIMA/ARIMA for comparison with Prophet
# - Build an interactive dashboard using Streamlit or Plotly Dash
# - Use probabilistic forecasts and evaluate against held-out data

# %% [markdown]
# ## Notes
# - The notebook downloads live data from Our World in Data. If you prefer an offline dataset,
#   I have also provided a small sample CSV file separately for quick testing.
# - If Prophet fails to install in Colab, restart the runtime and run the install cell again.
# - Change `COUNTRY` at the top to explore other country time series.

# End of notebook
